PROGRAM
-> FUNCTION_LIST

FUNCTION_LIST
-> FUNCTION_LIST FUNCTION
-> FUNCTION

///////////////////////////////////////////////////////////////////////////////
// Types
///////////////////////////////////////////////////////////////////////////////

COMPARISON_OPERATOR
-> EQ // ==
-> LT // <
-> LE // <=
-> GT // >
-> GE // >=

DATA_TYPE
-> INT
-> DOUBLE
-> STRING
-> DATA_TYPE OPEN_SQUARE CLOSE_SQUARE // double[]

UNARY_OPERATOR
-> PLUS
-> MINUS

BINARY_OPERATOR
-> COMPARISON_OPERATOR
-> PLUS
-> MINUS
-> MULTIPLY
-> DIVIDE

EXPRESSION
-> (EXPRESSION)
-> EXPRESSION
-> EXPRESSION BINARY_OPERATOR EXPRESSION
-> UNARY_OPERATOR EXPRESSION
-> IDENTIFIER PLUS_PLUS
-> IDENTIFIER
-> LITERAL
-> FUNCTION_CALL ^^^up to semantic to determine whether this was actually okay^^^

LITERAL
-> INT_LITERAL
-> FLOAT_LITERAL
-> STRING_LITERAL

///////////////////////////////////////////////////////////////////////////////
// Function Definitions
///////////////////////////////////////////////////////////////////////////////

FUNCTION
-> RETURN_TYPE IDENTIFIER OPEN_PARENTHESIS PARAMETER_LIST CLOSE_PARENTHESIS BLOCK

RETURN_TYPE
-> VARIABLE_TYPE
-> VOID

PARAMETER_LIST
-> NON_EMPTY_PARAMETER_LIST
-> nil

NON_EMPTY_PARAMETER_LIST
-> NON_EMPTY_PARAMETER_LIST COMMA PARAMETER
-> PARAMETER

PARAMETER
-> VARIABLE_TYPE IDENTIFIER

ARGUMENT_LIST
-> NON_EMPTY_ARGUMENT_LIST
-> nil

NON_EMPTY_ARGUMENT_LIST
-> NON_EMPTY_ARGUMENT_LIST COMMA EXPRESSION
-> EXPRESSION

FUNCTION_CALL
-> IDENTIFIER OPEN_PARENTHESIS ARGUMENT_LIST CLOSE_PARENTHESIS

///////////////////////////////////////////////////////////////////////////////
// Statements
///////////////////////////////////////////////////////////////////////////////

STATEMENT_LIST
-> STATEMENT_LIST STATEMENT
-> STATEMENT

STATEMENT
-> LINE_STATEMENT
-> BLOCK_STATEMENT

LINE_STATEMENT
-> LINE_STATEMENT_BODY SEMICOLON

LINE_STATEMENT_BODY
-> FUNCTION_CALL
-> DECLARATION // double a
-> ASSIGNMENT // a = 5.0
-> DECLARATION_ASSIGNMENT // double a = 5.0
-> RETURN_STATEMENT // return x

DECLARATION // string x;
-> DATA_TYPE IDENTIFIER_LIST

IDENTIFIER_LIST
-> IDENTIFIER_LIST COMMA IDENTIFIER
-> IDENTIFIER

ASSIGNMENT // x = "";
-> IDENTIFIER EQUALS EXPRESSION

DECLARATION_ASSIGNMENT // string x = "";
-> VARIABLE_TYPE IDENTIFIER EQUALS EXPRESSION

RETURN_STATEMENT
-> RETURN EXPRESSION

BLOCK_STATEMENT
-> FOR_STATEMENT
-> WHILE_STATEMENT
-> IF_STATEMENT

FOR_STATEMENT
-> FOR OPEN_PARENTHESIS LINE_STATEMENT EXPRESSION SEMICOLON EXPRESSION CLOSE_PARENTHESIS BLOCK

WHILE_STATEMENT
-> WHILE OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS BLOCK

IF_STATEMENT
-> IF_SEGMENT ELSE_SEGMENT
-> IF_SEGMENT

IF_SEGMENT
-> IF OPEN_PARENTHESIS EXPRESSION CLOSE_PARENTHESIS BLOCK

ELSE_SEGMENT
-> ELSE BLOCK

BLOCK
-> OPEN_CURLY STEP_LIST CLOSE_CURLY
