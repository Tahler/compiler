PROGRAM
-> FUNCTION_LIST

FUNCTION_LIST
-> FUNCTION_LIST FUNCTION
-> FUNCTION

FUNCTION
-> RETURN_TYPE IDENTIFIER OPEN_PARENTHESIS PARAMETER_LIST CLOSE_PARENTHESIS BLOCK

FUNCTION_CALL
-> IDENTIFIER OPEN_PARENTHESIS IDENTIFIER_LIST CLOSE_PARENTHESIS

^^^^^^^^^^^^^^^^^^^^
LINE
-> STATEMENT SEMICOLON

STEP
-> EXPRESSION SEMICOLON
-> STATEMENT SEMICOLON
^^^^^^^^^^^^^^^^^^^^

FOR_LOOP
-> FOR OPEN_PARENTHESIS STATEMENT SEMICOLON BOOLEAN_EXPRESSION SEMICOLON STATEMENT CLOSE_PARENTHESIS BLOCK

WHILE_LOOP
-> WHILE OPEN_PARENTHESIS BOOLEAN_EXPRESSION CLOSE_PARENTHESIS BLOCK

IF_STATEMENT
-> IF_SEGMENT ELSE_SEGMENT
-> IF_SEGMENT

IF_SEGMENT
-> IF OPEN_PARENTHESIS BOOLEAN_EXPRESSION CLOSE_PARENTHESIS BLOCK

ELSE_SEGMENT
-> ELSE BLOCK

PARAMETER_LIST
-> NON_EMPTY_PARAMETER_LIST
-> nil

NON_EMPTY_PARAMETER_LIST
-> NON_EMPTY_PARAMETER_LIST COMMA PARAMETER
-> PARAMETER

PARAMETER
-> VARIABLE_TYPE IDENTIFIER

RETURN_STATEMENT
-> RETURN EXPRESSION

RETURN_TYPE
-> VARIABLE_TYPE
-> VOID

BLOCK
-> OPEN_CURLY STEP_LIST CLOSE_CURLY

STEP_LIST
-> STEP_LIST STEP
-> STEP

BOOLEAN_EXPRESSION
-> EXPRESSION COMPARISON_OPERATOR EXPRESSION

COMPARISON_OPERATOR
-> EQ // ==
-> LT // <
-> LE // <=
-> GT // >
-> GE // >=
-> ^^^^^^^^^^^^^^^^^^FUNC^^^^^^^^^^^^^^^^^^

STATEMENT
-> DECLARATION // double a;
-> ASSIGNMENT // a = 5.0;
-> DECLARATION_ASSIGNMENT // double a = 5.0;
-> RETURN_STATEMENT

DECLARATION // string x;
-> DATA_TYPE IDENTIFIER_LIST

IDENTIFIER_LIST
-> IDENTIFIER_LIST COMMA IDENTIFIER
-> IDENTIFIER

ASSIGNMENT // x = "";
-> IDENTIFIER EQUALS EXPRESSION

DECLARATION_ASSIGNMENT // string x = "";
-> VARIABLE_TYPE IDENTIFIER EQUALS EXPRESSION

DATA_TYPE
-> INT
-> DOUBLE
-> STRING

EXPRESSION
-> (EXPRESSION)
-> VALUE PLUS VALUE
-> VALUE MINUS VALUE
-> VALUE MULTIPLY VALUE
-> VALUE DIVIDE VALUE
-> PLUS VALUE
-> MINUS VALUE

VALUE
-> EXPRESSION
-> IDENTIFIER
-> LITERAL
-> FUNCTION_CALL ^^^only with return^^^
