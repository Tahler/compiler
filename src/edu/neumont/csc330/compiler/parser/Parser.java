package edu.neumont.csc330.compiler.parser;

import edu.neumont.csc330.compiler.tokenizer.Token;

import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

public class Parser {
    
}

enum ReduceState {
    // Multi token
    REDUCE_TO_FUNCTION_LIST_WITH_MAIN,
    REDUCE_TO_FUNCTION_LIST,
    REDUCE_TO_EXPRESSION,
    REDUCE_TO_FUNCTION,
    REDUCE_TO_MAIN_FUNCTION,
    REDUCE_TO_PARAMETER,
    REDUCE_TO_PARAMETER_LIST,
    REDUCE_TO_NON_EMPTY_PARAMETER_LIST,
    REDUCE_TO_ARGUMENT_LIST,
    REDUCE_TO_NON_EMPTY_ARGUMENT_LIST,
    REDUCE_TO_FUNCTION_CALL,
    REDUCE_TO_STATEMENT_LIST, // TODO: statement first? end up with two statement lists?
    REDUCE_TO_LINE_STATEMENT,
    REDUCE_TO_DECLARATION,
    REDUCE_TO_IDENTIFIER_LIST,
    REDUCE_TO_ASSIGNMENT,
    REDUCE_TO_DECLARATION_ASSIGNMENT,
    REDUCE_TO_RETURN_STATEMENT,
    REDUCE_TO_FOR_STATEMENT,
    REDUCE_TO_WHILE_STATEMENT,
    REDUCE_TO_IF_STATEMENT,
    REDUCE_TO_IF_SEGMENT,
    REDUCE_TO_ELSE_SEGMENT,
    REDUCE_TO_BLOCK,

    // Single token
    REDUCE_TO_PROGRAM,
    REDUCE_TO_COMPARISON_OPERATOR,
    REDUCE_TO_RETURN_TYPE,
    REDUCE_TO_DATA_TYPE,
    REDUCE_TO_BINARY_OPERATOR,
    REDUCE_TO_UNARY_OPERATOR,
    REDUCE_TO_LITERAL,
    REDUCE_TO_LINE_STATEMENT_BODY,
    REDUCE_TO_STATEMENT,
    REDUCE_TO_BLOCK_STATEMENT,

    // Special
    _INITIAL,
    _INVALID

}
