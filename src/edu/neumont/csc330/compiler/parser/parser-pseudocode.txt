NO_REDUCE = map of token to node

ReduceState
    // ---------------------- //
    // --- success states --- //
    // ---------------------- //

    // [FUNCTION_LIST_WITH_MAIN] (!*)
    REDUCE_TO_PROGRAM

    // [MAIN_FUNCTION]
    // [FUNCTION_LIST_WITH_MAIN->FUNCTION_LIST]
    // [FUNCTION_LIST->MAIN_FUNCTION]
    REDUCE_TO_FUNCTION_LIST_WITH_MAIN

    // [FUNCTION]
    // [FUNCTION->FUNCTION_LIST]
    REDUCE_TO_FUNCTION_LIST

    // [EQ]
    // [LT]
    // [LE]
    // [GT]
    // [GE]
    REDUCE_TO_COMPARISON_OPERATOR

    // [VOID]
    // [DOUBLE]->FUNCTION_LIST
    // [DOUBLE]->FUNCTION_LIST_WITH_MAIN
    REDUCE_TO_RETURN_TYPE

    // [INT]->OPEN_CURLY
    // [INT]->STATEMENT_LIST
    // [DOUBLE]->OPEN_CURLY
    // [DOUBLE]->STATEMENT_LIST
    REDUCE_TO_DATA_TYPE

    // [COMPARISON_OPERATOR]
    // [PLUS]
    // [MINUS]->EXPRESSION // TODO
    // [MULTIPLY]
    // [DIVIDE]
    REDUCE_TO_BINARY_OPERATOR

    // [MINUS]->EQUALS
    REDUCE_TO_UNARY_OPERATOR

    // [CLOSE_PARENTHESIS->EXPRESSION->OPEN_PARENTHESIS]
    // [EXPRESSION->BINARY_OPERATOR->EXPRESSION]
    // [EXPRESSION->UNARY_OPERATOR]
    // [IDENTIFIER] (!PLUS_PLUS)
    // [PLUS_PLUS->IDENTIFIER]
    // [LITERAL]
    // [FUNCTION_CALL] (!SEMICOLON) // TODO
    REDUCE_TO_EXPRESSION

    // [INT_LITERAL]
    // [FLOAT_LITERAL]
    REDUCE_TO_LITERAL

    // [BLOCK->CLOSE_PARENTHESIS->PARAMETER_LIST->OPEN_PARENTHESIS->IDENTIFIER->RETURN_TYPE]
    REDUCE_TO_FUNCTION

    // [BLOCK->CLOSE_PARENTHESIS->IDENTIFIER->CLOSE_SQUARE->OPEN_SQUARE->STRING->OPEN_PARENTHESIS->MAIN->VOID]
    REDUCE_TO_MAIN_FUNCTION

    // [IDENTIFIER->DATA_TYPE] (!EQUALS)
    REDUCE_TO_PARAMETER

    // [] OPEN_PARENTHESIS->IDENTIFIER->RETURN_TYPE (=CLOSE_PARENTHESIS)
    // [NON_EMPTY_PARAMETER_LIST]
    REDUCE_TO_PARAMETER_LIST

    // [PARAMETER]
    // [PARAMETER->COMMA->PARAMETER_LIST]
    REDUCE_TO_NON_EMPTY_PARAMETER_LIST

    // [] OPEN_PARENTHESIS->IDENTIFIER (=CLOSE_PARENTHESIS)
    // [NON_EMPTY_ARGUMENT_LIST]
    REDUCE_TO_ARGUMENT_LIST

    // [EXPRESSION]->OPEN_PARENTHESIS->IDENTIFIER
    // [EXPRESSION->COMMA->NON_EMPTY_ARGUMENT_LIST]
    REDUCE_TO_NON_EMPTY_ARGUMENT_LIST

    // [CLOSE_PARENTHESIS->ARGUMENT_LIST->OPEN_PARENTHESIS->IDENTIFIER]
    REDUCE_TO_FUNCTION_CALL

    // [STATEMENT]
    // [STATEMENT->STATEMENT_LIST]
    REDUCE_TO_STATEMENT_LIST

    // [LINE_STATEMENT]
    // [BLOCK_STATEMENT]
    REDUCE_TO_STATEMENT

    // [LINE_STATEMENT_BODY->SEMICOLON]
    REDUCE_TO_LINE_STATEMENT

    // [FUNCTION_CALL]->/*TODO: not something??*/ (=SEMICOLON)
    // [DECLARATION]
    // [ASSIGNMENT]
    // [DECLARATION_ASSIGNMENT]
    REDUCE_TO_LINE_STATEMENT_BODY

    // [IDENTIFIER_LIST->DATA_TYPE]
    REDUCE_TO_DECLARATION

    // [IDENTIFIER]
    // [IDENTIFIER->COMMA->IDENTIFIER_LIST]
    REDUCE_TO_IDENTIFIER_LIST

    // [EXPRESSION->EQUALS->IDENTIFIER]
    REDUCE_TO_ASSIGNMENT

    // [ASSIGNMENT->DATA_TYPE]
    // TODO: or [EXPRESSION->EQUALS->IDENTIFIER->DATA_TYPE]
    REDUCE_TO_DECLARATION_ASSIGNMENT

    // [EXPRESSION->RETURN] (=SEMICOLON)
    REDUCE_TO_RETURN_STATEMENT

    // [FOR_STATEMENT]
    // [WHILE_STATEMENT]
    // [IF_STATEMENT]
    REDUCE_TO_BLOCK_STATEMENT

    // [BLOCK->CLOSE_PARENTHESIS->LINE_STATEMENT->SEMICOLON->EXPRESSION->LINE_STATEMENT->OPEN_PARENTHESIS->FOR]
    REDUCE_TO_FOR_STATEMENT

    // [BLOCK->CLOSE_PARENTHESIS->EXPRESSION->OPEN_PARENTHESIS->WHILE]
    REDUCE_TO_WHILE_STATEMENT

    // [IF_SEGMENT] (!ELSE)
    // [ELSE_SEGMENT->IF_SEGMENT]
    REDUCE_TO_IF_STATEMENT

    // [BLOCK->CLOSE_PARENTHESIS->EXPRESSION->OPEN_PARENTHESIS->IF]
    REDUCE_TO_IF_SEGMENT

    // [BLOCK->ELSE]
    REDUCE_TO_ELSE_SEGMENT

    // [CLOSE_CURLY->STATEMENT_LIST->CLOSE_CURLY]
    REDUCE_TO_BLOCK


parse(tokens)
    stack = stack of N nodes

    while more tokens
        curr = poll next token
        look = peek next token

        switch curr.type

reduce(stack: stack of nodes, look: next token/node)
    roller = stack of 0 nodes
    ...

should_reduce(ReduceState, look)
    switch look
    ...
